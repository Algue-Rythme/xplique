{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\ud83e\udd8a Xplique (pronounced \\\u025bks.plik\\ ) is a Python toolkit dedicated to explainability, currently based on Tensorflow. The goal of this library is to gather the state of the art of Explainable AI to help you understand your complex neural network models. Attributions \u00b7 Concept \u00b7 Feature Visualization \u00b7 Metrics The library is composed of several modules, the Attributions Methods module implements various methods (e.g Saliency, Grad-CAM, Integrated-Gradients...), with explanations, examples and links to official papers. The Feature Visualization module allows to see how neural networks build their understanding of images by finding inputs that maximize neurons, channels, layers or compositions of these elements. The Concepts module allows you to extract human concepts from a model and to test their usefulness with respect to a class. Finally, the Metrics module covers the current metrics used in explainability. Used in conjunction with the Attribution Methods module, it allows you to test the different methods or evaluate the explanations of a model. \ud83d\udcda Table of contents \u00b6 \ud83d\udcda Table of contents \ud83d\ude80 Quick Start \ud83d\udd25 Notebooks \ud83d\udce6 What's Included \ud83d\udc4d Contributing \ud83d\udc40 See Also \ud83d\ude4f Acknowledgments \ud83d\udc68\u200d\ud83c\udf93 Creator \ud83d\udcdd License \ud83d\ude80 Quick Start \u00b6 Xplique requires a version of python higher than 3.6 and several libraries including Tensorflow and Numpy. Installation can be done using Pypi: pip install xplique Now that Xplique is installed, here are 4 basic examples of what you can do with the available modules. Attributions Methods \u00b6 let's start with a simple example, by computing Grad-CAM for several images (or a complete dataset) on a trained model. from xplique.attributions import GradCAM # load images, labels and model # ... explainer = GradCAM ( model ) explanations = explainer . explain ( images , labels ) # or just `explainer(images, labels)` Attributions Metrics \u00b6 In order to measure if the explanations provided by our method are faithful (it reflects well the functioning of the model) we can use a fidelity metric such as Deletion from xplique.attributions import GradCAM from xplique.metrics import Deletion # load images, labels and model # ... explainer = GradCAM ( model ) metric = Deletion ( model , inputs , labels ) score_grad_cam = metric ( explainer ) Concepts Extraction \u00b6 Concerning the concept-based methods, we can for example extract a concept vector from a layer of a model. In order to do this, we use two datasets, one containing inputs containing the concept: positive_samples , the other containing other entries which do not contain the concept: negative_samples . from xplique.concepts import Cav # load a model, samples that contain a concept # (positive) and samples who don't (negative) # ... extractor = Cav ( model , 'mixed3' ) concept_vector = extractor ( positive_samples , negative_samples ) Feature Visualization \u00b6 Finally, in order to find an image that maximizes a neuron and at the same time a layer, we build two objectives that we combine together. We then call the optimizer which returns our images from xplique.features_visualizations import Objective from xplique.features_visualizations import optimize # load a model... neuron_obj = Objective . neuron ( model , \"logits\" , 200 ) channel_obj = Objective . layer ( model , \"mixed3\" , 10 ) obj = neuron_obj + 2.0 * channel_obj images = optimize ( obj ) \ud83d\udd25 Notebooks \u00b6 Using the attributions methods \ud83d\udce6 What's Included \u00b6 Attribution Method Type of Model Source Deconvolution TF Paper Grad-CAM TF Paper Grad-CAM++ TF Paper Gradient Input TF Paper Guided Backprop TF Paper Integrated Gradients TF Paper Kernel SHAP Callable Paper Lime Callable Paper Occlusion Callable Paper Rise Callable Paper Saliency TF Paper SmoothGrad TF Paper SquareGrad TF Paper VarGrad TF Paper Attribution Metrics Type of Model Property Source MuFidelity TF Fidelity Paper Deletion TF Fidelity Paper Insertion TF Fidelity Paper Average Stability TF Stability Paper (WIP) MeGe (WIP) ReCo Concepts method Type of Model Source Concept Activation Vector (CAV) TF Paper Testing CAV TF Paper (WIP) Robust TCAV Feature Visualization (Paper) Type of Model Details Neurons TF Optimizes images for specific neurons Layer TF Optimizes images for specific layers Channel TF Optimizes images for specific channels Direction TF Optimizes images for specific vector Fourrier Preconditioning TF Optimize in Fourier basis (see preconditioning ) Objective combination TF Allows to combine objectives methods with TF need a Tensorflow model. \ud83d\udc4d Contributing \u00b6 Feel free to propose your ideas or come and contribute with us on the Xplique toolbox! We have a specific document where we describe in a simple way how to make your first pull request: just here . \ud83d\udc40 See Also \u00b6 This library is one approach of many to explain your model. We don't expect it to be the final solution; we create it to explore one point in the space of possibilities. Other tools to explain your model include: Lucid the wonderful library specialized in feature visualization from OpenAI. Captum the Pytorch library for Interpretability research Tf-explain that implement multiples attribution methods and propose callbacks API for tensorflow. Alibi Explain for model inspection and interpretation To learn more about Explainable AI in general, see: Interpretable Machine Learning an excellent book by Christophe Molnar. Interpretability Beyond Feature Attribution by Been Kim. A Roadmap for the Rigorous Science of Interpretability by Finale Doshi-Velez. DEEL White paper a summary of the DEEL team on the challenges of certifiable AI and the role of explainability for this purpose \ud83d\ude4f Acknowledgments \u00b6 This project received funding from the French \u201dInvesting for the Future \u2013 PIA3\u201d program within the Artificial and Natural Intelligence Toulouse Institute (ANITI). The authors gratefully acknowledge the support of the DEEL project. \ud83d\udc68\u200d\ud83c\udf93 Creator \u00b6 This library was started as a side-project by Thomas FEL who is doing a thesis on explainability. \ud83d\udcdd License \u00b6 The package is released under MIT license .","title":"Home"},{"location":"index.html#table-of-contents","text":"\ud83d\udcda Table of contents \ud83d\ude80 Quick Start \ud83d\udd25 Notebooks \ud83d\udce6 What's Included \ud83d\udc4d Contributing \ud83d\udc40 See Also \ud83d\ude4f Acknowledgments \ud83d\udc68\u200d\ud83c\udf93 Creator \ud83d\udcdd License","title":"\ud83d\udcda Table of contents"},{"location":"index.html#quick-start","text":"Xplique requires a version of python higher than 3.6 and several libraries including Tensorflow and Numpy. Installation can be done using Pypi: pip install xplique Now that Xplique is installed, here are 4 basic examples of what you can do with the available modules.","title":"\ud83d\ude80 Quick Start"},{"location":"index.html#notebooks","text":"Using the attributions methods","title":"\ud83d\udd25 Notebooks"},{"location":"index.html#whats-included","text":"Attribution Method Type of Model Source Deconvolution TF Paper Grad-CAM TF Paper Grad-CAM++ TF Paper Gradient Input TF Paper Guided Backprop TF Paper Integrated Gradients TF Paper Kernel SHAP Callable Paper Lime Callable Paper Occlusion Callable Paper Rise Callable Paper Saliency TF Paper SmoothGrad TF Paper SquareGrad TF Paper VarGrad TF Paper Attribution Metrics Type of Model Property Source MuFidelity TF Fidelity Paper Deletion TF Fidelity Paper Insertion TF Fidelity Paper Average Stability TF Stability Paper (WIP) MeGe (WIP) ReCo Concepts method Type of Model Source Concept Activation Vector (CAV) TF Paper Testing CAV TF Paper (WIP) Robust TCAV Feature Visualization (Paper) Type of Model Details Neurons TF Optimizes images for specific neurons Layer TF Optimizes images for specific layers Channel TF Optimizes images for specific channels Direction TF Optimizes images for specific vector Fourrier Preconditioning TF Optimize in Fourier basis (see preconditioning ) Objective combination TF Allows to combine objectives methods with TF need a Tensorflow model.","title":"\ud83d\udce6 What's Included"},{"location":"index.html#contributing","text":"Feel free to propose your ideas or come and contribute with us on the Xplique toolbox! We have a specific document where we describe in a simple way how to make your first pull request: just here .","title":"\ud83d\udc4d Contributing"},{"location":"index.html#see-also","text":"This library is one approach of many to explain your model. We don't expect it to be the final solution; we create it to explore one point in the space of possibilities. Other tools to explain your model include: Lucid the wonderful library specialized in feature visualization from OpenAI. Captum the Pytorch library for Interpretability research Tf-explain that implement multiples attribution methods and propose callbacks API for tensorflow. Alibi Explain for model inspection and interpretation To learn more about Explainable AI in general, see: Interpretable Machine Learning an excellent book by Christophe Molnar. Interpretability Beyond Feature Attribution by Been Kim. A Roadmap for the Rigorous Science of Interpretability by Finale Doshi-Velez. DEEL White paper a summary of the DEEL team on the challenges of certifiable AI and the role of explainability for this purpose","title":"\ud83d\udc40 See Also"},{"location":"index.html#acknowledgments","text":"This project received funding from the French \u201dInvesting for the Future \u2013 PIA3\u201d program within the Artificial and Natural Intelligence Toulouse Institute (ANITI). The authors gratefully acknowledge the support of the DEEL project.","title":"\ud83d\ude4f Acknowledgments"},{"location":"index.html#creator","text":"This library was started as a side-project by Thomas FEL who is doing a thesis on explainability.","title":"\ud83d\udc68\u200d\ud83c\udf93 Creator"},{"location":"index.html#license","text":"The package is released under MIT license .","title":"\ud83d\udcdd License"},{"location":"api.html","text":"API \u00b6 Saliency Gradient Input Integrated Gradient SmoothGrad Grad-CAM","title":"API"},{"location":"api.html#api","text":"Saliency Gradient Input Integrated Gradient SmoothGrad Grad-CAM","title":"API"},{"location":"test.html","text":"xplic \u00b6 xplic.methods \u00b6","title":"xplic"},{"location":"test.html#xplic","text":"","title":"xplic"},{"location":"test.html#xplicmethods","text":"","title":"xplic.methods"},{"location":"api/cav.html","text":"CAV \u00b6 CAV or Concept Activation Vector represent a high-level concept as a vector that indicate the direction to take (for activations of a layer) to maximise this concept. Quote [...] CAV for a concept is simply a vector in the direction of the values (e.g., activations) of that concept\u2019s set of examples\u2026 we derive CAVs by training a linear classifier between a concept\u2019s examples and random counter examples and then taking the vector orthogonal to the decision boundary. -- Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018). 1 For a layer f_l f_l of a model, we seek the linear classifier v_l \\in \\mathbb{R}^d v_l \\in \\mathbb{R}^d that separate the activations of the positive examples \\{ f_l(x) : x \\in \\mathcal{P} \\} \\{ f_l(x) : x \\in \\mathcal{P} \\} , and the activations of the random/negative examples \\{ f_l(x) : x \\in \\mathcal{R} \\} \\{ f_l(x) : x \\in \\mathcal{R} \\} . Example \u00b6 from xplique.concepts import Cav cav_renderer = Cav ( model , 'mixed4d' , classifier = 'SGD' , test_fraction = 0.1 ) cav = cav_renderer ( positive_examples , random_examples ) Cav \u00b6 Used to compute the Concept Activation Vector, which is a vector in the direction of the activations of that concept\u2019s set of examples. __init__(self, model: tf.keras.Model, target_layer: Union[str, int], classifier: Union[str, Callable] = 'SGD', test_fraction: float = 0.2, batch_size: int = 64, verbose: bool = False) \u00b6 Parameters model : tf.keras.Model Model to extract concept from. target_layer : Union[str, int] Index of the target layer or name of the layer. classifier : 'SGD' or 'SVM' or Sklearn model, optional Default implementation use SGD classifier, SVM give more robust results but the computation time is longer. test_fraction : float = 0.2 Fraction of the dataset used for test batch_size : int = 64 Batch size during the activations extraction verbose : bool = False If true, display information while training the classifier fit(self, positive_dataset: tf.Tensor, negative_dataset: tf.Tensor) -> <built-in function array> \u00b6 Compute and return the Concept Activation Vector (CAV) associated to the dataset and the layer targeted. Parameters positive_dataset : tf.Tensor Dataset of positive samples : samples containing the concept. negative_dataset : tf.Tensor Dataset of negative samples : samples without the concept Return cav : Vector of the same shape as the layer output Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018). \u21a9","title":"Cav"},{"location":"api/cav.html#cav","text":"CAV or Concept Activation Vector represent a high-level concept as a vector that indicate the direction to take (for activations of a layer) to maximise this concept. Quote [...] CAV for a concept is simply a vector in the direction of the values (e.g., activations) of that concept\u2019s set of examples\u2026 we derive CAVs by training a linear classifier between a concept\u2019s examples and random counter examples and then taking the vector orthogonal to the decision boundary. -- Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018). 1 For a layer f_l f_l of a model, we seek the linear classifier v_l \\in \\mathbb{R}^d v_l \\in \\mathbb{R}^d that separate the activations of the positive examples \\{ f_l(x) : x \\in \\mathcal{P} \\} \\{ f_l(x) : x \\in \\mathcal{P} \\} , and the activations of the random/negative examples \\{ f_l(x) : x \\in \\mathcal{R} \\} \\{ f_l(x) : x \\in \\mathcal{R} \\} .","title":"CAV"},{"location":"api/cav.html#example","text":"from xplique.concepts import Cav cav_renderer = Cav ( model , 'mixed4d' , classifier = 'SGD' , test_fraction = 0.1 ) cav = cav_renderer ( positive_examples , random_examples )","title":"Example"},{"location":"api/cav.html#Cav","text":"Used to compute the Concept Activation Vector, which is a vector in the direction of the activations of that concept\u2019s set of examples.","title":"Cav"},{"location":"api/deconvnet.html","text":"Deconvnet \u00b6 Example \u00b6 from xplique.attributions import DeconvNet # load images, labels and model # ... method = DeconvNet ( model ) explanations = method . explain ( images , labels ) DeconvNet \u00b6 Used to compute the DeconvNet method, which modifies the classic Saliency procedure on ReLU's non linearities, allowing only the positive gradients (even from negative inputs) to pass through. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute DeconvNet for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Guided Backpropagation maps.","title":"DeconvNet"},{"location":"api/deconvnet.html#deconvnet","text":"","title":"Deconvnet"},{"location":"api/deconvnet.html#example","text":"from xplique.attributions import DeconvNet # load images, labels and model # ... method = DeconvNet ( model ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/deconvnet.html#DeconvNet","text":"Used to compute the DeconvNet method, which modifies the classic Saliency procedure on ReLU's non linearities, allowing only the positive gradients (even from negative inputs) to pass through.","title":"DeconvNet"},{"location":"api/grad_cam.html","text":"Grad-CAM \u00b6 Grad-CAM is a technique for producing visual explanations that can be used on Convolutional Neural Netowrk (CNN) which uses both gradients and the feature maps of the last convolutional layer. Quote Grad-CAM uses the gradients of any target concept (say logits for \u201cdog\u201d or even a caption), flowing into the final convolutional layer to produce a coarse localization map highlighting the important regions in the image for predicting the concept. -- Visual Explanations from Deep Networks via Gradient-based Localization (2016). More precisely, to obtain the localization map for a class L_c L_c , we need to compute the weights \\alpha_k^c \\alpha_k^c associated to each of the feature map activation A^k A^k . As we use the last convolutionnal layer, k k will be the number of filters, Z Z is the number of pixels in each feature map (width \\cdot \\cdot height). \\begin{align} \\alpha_k^c = \\frac{1}{Z} \\sum_i\\sum_j \\frac{ \\partial{y^c}} {\\partial{A_{ij}^k} } \\\\ L^c = max(0, \\sum_k \\alpha_k^c A^k) \\end{align} \\begin{align} \\alpha_k^c = \\frac{1}{Z} \\sum_i\\sum_j \\frac{ \\partial{y^c}} {\\partial{A_{ij}^k} } \\\\ L^c = max(0, \\sum_k \\alpha_k^c A^k) \\end{align} Notice that the size of the explanation depends on the size (height, width) of the last feature map, so we have to interpolate in order to find the same dimensions as the input. Example \u00b6 from xplique.attributions import GradCAM # load images, labels and model # ... method = GradCAM ( model ) explanations = method . explain ( images , labels ) GradCAM \u00b6 Used to compute the Grad-CAM visualization method. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32, conv_layer: Union[str, int, NoneType] = None) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. conv_layer : Union[str, int, NoneType] = None Layer to target for Grad-CAM algorithm, if int, will be be interpreted as layer index, if string will look for the layer name. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute Grad-CAM and resize explanations to match inputs shape. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return grad_cam : tf.Tensor Grad-CAM explanations, same shape as the inputs except for the channels. Visual Explanations from Deep Networks via Gradient-based Localization (2016). \u21a9","title":"Grad-CAM"},{"location":"api/grad_cam.html#grad-cam","text":"Grad-CAM is a technique for producing visual explanations that can be used on Convolutional Neural Netowrk (CNN) which uses both gradients and the feature maps of the last convolutional layer. Quote Grad-CAM uses the gradients of any target concept (say logits for \u201cdog\u201d or even a caption), flowing into the final convolutional layer to produce a coarse localization map highlighting the important regions in the image for predicting the concept. -- Visual Explanations from Deep Networks via Gradient-based Localization (2016). More precisely, to obtain the localization map for a class L_c L_c , we need to compute the weights \\alpha_k^c \\alpha_k^c associated to each of the feature map activation A^k A^k . As we use the last convolutionnal layer, k k will be the number of filters, Z Z is the number of pixels in each feature map (width \\cdot \\cdot height). \\begin{align} \\alpha_k^c = \\frac{1}{Z} \\sum_i\\sum_j \\frac{ \\partial{y^c}} {\\partial{A_{ij}^k} } \\\\ L^c = max(0, \\sum_k \\alpha_k^c A^k) \\end{align} \\begin{align} \\alpha_k^c = \\frac{1}{Z} \\sum_i\\sum_j \\frac{ \\partial{y^c}} {\\partial{A_{ij}^k} } \\\\ L^c = max(0, \\sum_k \\alpha_k^c A^k) \\end{align} Notice that the size of the explanation depends on the size (height, width) of the last feature map, so we have to interpolate in order to find the same dimensions as the input.","title":"Grad-CAM"},{"location":"api/grad_cam.html#example","text":"from xplique.attributions import GradCAM # load images, labels and model # ... method = GradCAM ( model ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/grad_cam.html#GradCAM","text":"Used to compute the Grad-CAM visualization method.","title":"GradCAM"},{"location":"api/grad_cam_pp.html","text":"Grad-CAM++ \u00b6 Grad-CAM++ is a technique for producing visual explanations that can be used on Convolutional Neural Netowrk (CNN) which uses both gradients and the feature maps of the last convolutional layer. Example \u00b6 from xplique.attributions import GradCAMPP # load images, labels and model # ... method = GradCAMPP ( model , conv_layer =- 3 ) explanations = method . explain ( images , labels ) GradCAMPP \u00b6 Used to compute the Grad-CAM++ visualization method. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32, conv_layer: Union[str, int, NoneType] = None) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. conv_layer : Union[str, int, NoneType] = None Layer to target for Grad-CAM++ algorithm, if int, will be be interpreted as layer index, if string will look for the layer name. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute Grad-CAM and resize explanations to match inputs shape. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return grad_cam : tf.Tensor Grad-CAM explanations, same shape as the inputs except for the channels. Grad-CAM++: Improved Visual Explanations for Deep Convolutional Networks (2017). \u21a9","title":"Grad-CAM++"},{"location":"api/grad_cam_pp.html#grad-cam","text":"Grad-CAM++ is a technique for producing visual explanations that can be used on Convolutional Neural Netowrk (CNN) which uses both gradients and the feature maps of the last convolutional layer.","title":"Grad-CAM++"},{"location":"api/grad_cam_pp.html#example","text":"from xplique.attributions import GradCAMPP # load images, labels and model # ... method = GradCAMPP ( model , conv_layer =- 3 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/grad_cam_pp.html#GradCAMPP","text":"Used to compute the Grad-CAM++ visualization method.","title":"GradCAMPP"},{"location":"api/gradient_input.html","text":"Gradient \\odot \\odot Input \u00b6 Gradient \\odot \\odot Input is a visualization techniques based on the gradient of a class score relative to the input, element-wise with the input. This method was introduced by Shrikumar et al., 2016 1 , in an old version of their DeepLIFT paper 2 . Quote Gradient inputs was at first proposed as a technique to improve the sharpness of the attribution maps. The attribution is computed taking the (signed) partial derivatives of the output with respect to the input and multiplying them with the input itself. -- Towards better understanding of the gradient-based attribution methods for Deep Neural Networks (2017) 3 A theoretical analysis conducted by Ancona et al, 2018 3 showed that Gradient \\odot \\odot Input is equivalent to \\epsilon \\epsilon -LRP and DeepLift methods under certain conditions: using a baseline of zero, and with all biases to zero. More precisely, the explanation \\phi_x \\phi_x for an input x x , for a given class c c is defined as \\phi_x = x \\odot \\frac{\\partial{S_c(x)}}{\\partial{x}} \\phi_x = x \\odot \\frac{\\partial{S_c(x)}}{\\partial{x}} with S_c S_c the unormalized class score (layer before softmax). Example \u00b6 from xplique.attributions import GradientInput # load images, labels and model # ... method = GradientInput ( model ) explanations = method . explain ( images , labels ) GradientInput \u00b6 Used to compute elementwise product between the saliency maps of Simonyan et al. and the input (Gradient x Input). __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = None, batch_size: Union[int, NoneType] = 64) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = None Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 64 Number of samples to explain at once, if None compute all at once. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute gradients x inputs for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Gradients x Inputs, with the same shape as the inputs. Not Just a Black Box: Learning Important Features Through Propagating Activation Differences \u21a9 Learning Important Features Through Propagating Activation Differences \u21a9 Towards better understanding of gradient-based attribution methods for Deep Neural Networks \u21a9 \u21a9","title":"Gradient Input"},{"location":"api/gradient_input.html#gradient-odotodot-input","text":"Gradient \\odot \\odot Input is a visualization techniques based on the gradient of a class score relative to the input, element-wise with the input. This method was introduced by Shrikumar et al., 2016 1 , in an old version of their DeepLIFT paper 2 . Quote Gradient inputs was at first proposed as a technique to improve the sharpness of the attribution maps. The attribution is computed taking the (signed) partial derivatives of the output with respect to the input and multiplying them with the input itself. -- Towards better understanding of the gradient-based attribution methods for Deep Neural Networks (2017) 3 A theoretical analysis conducted by Ancona et al, 2018 3 showed that Gradient \\odot \\odot Input is equivalent to \\epsilon \\epsilon -LRP and DeepLift methods under certain conditions: using a baseline of zero, and with all biases to zero. More precisely, the explanation \\phi_x \\phi_x for an input x x , for a given class c c is defined as \\phi_x = x \\odot \\frac{\\partial{S_c(x)}}{\\partial{x}} \\phi_x = x \\odot \\frac{\\partial{S_c(x)}}{\\partial{x}} with S_c S_c the unormalized class score (layer before softmax).","title":"Gradient \\odot\\odot Input"},{"location":"api/gradient_input.html#example","text":"from xplique.attributions import GradientInput # load images, labels and model # ... method = GradientInput ( model ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/gradient_input.html#GradientInput","text":"Used to compute elementwise product between the saliency maps of Simonyan et al. and the input (Gradient x Input).","title":"GradientInput"},{"location":"api/guided_backpropagation.html","text":"Guided Backpropagation \u00b6 Example \u00b6 from xplique.attributions import GuidedBackprop # load images, labels and model # ... method = GuidedBackprop ( model ) explanations = method . explain ( images , labels ) GuidedBackprop \u00b6 Used to compute the Guided Backpropagation, which modifies the classic Saliency procedure on ReLU's non linearities, allowing only the positive gradients from positive activations to pass through. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute Guided Backpropagation for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Guided Backpropagation maps.","title":"Guided Backprop"},{"location":"api/guided_backpropagation.html#guided-backpropagation","text":"","title":"Guided Backpropagation"},{"location":"api/guided_backpropagation.html#example","text":"from xplique.attributions import GuidedBackprop # load images, labels and model # ... method = GuidedBackprop ( model ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/guided_backpropagation.html#GuidedBackprop","text":"Used to compute the Guided Backpropagation, which modifies the classic Saliency procedure on ReLU's non linearities, allowing only the positive gradients from positive activations to pass through.","title":"GuidedBackprop"},{"location":"api/integrated_gradients.html","text":"Integrated Gradients \u00b6 Integrated Gradients is a visualization technique resulting of a theoretical search for an explanatory method that satisfies two axioms, Sensitivity and Implementation Invariance (Sundararajan et al 1 ). Quote We consider the straightline path (in R^n R^n ) from the baseline \\bar{x} \\bar{x} to the input x x , and compute the gradients at all points along the path. Integrated gradients are obtained by cumulating these gradients. -- Axiomatic Attribution for Deep Networks (2017) 1 Rather than calculating only the gradient relative to the image, the method consists of averaging the gradient values along the path from a baseline state to the current value. The baseline state is often set to zero, representing the complete absence of features. More precisely, with \\bar{x} \\bar{x} the baseline state, x x the image, c c the class of interest and S_c S_c the unormalized class score (layer before softmax). The Integrated Gradient is defined as IG(x) = (x - \\bar{x}) \\cdot \\int_0^1{ \\frac { \\partial{S_c(\\tilde{x})} } { \\partial{\\tilde{x}} } \\Big|_{ \\tilde{x} = \\bar{x} + \\alpha(x - \\bar{x}) } d\\alpha } IG(x) = (x - \\bar{x}) \\cdot \\int_0^1{ \\frac { \\partial{S_c(\\tilde{x})} } { \\partial{\\tilde{x}} } \\Big|_{ \\tilde{x} = \\bar{x} + \\alpha(x - \\bar{x}) } d\\alpha } In order to approximate from a finite number of steps, the implementation here use the Trapezoidal rule 3 and not a left-Riemann summation, which allows for more accurate results and improved performance. (see the paper below for a comparison of the methods 2 ). Example \u00b6 from xplique.attributions import IntegratedGradients # load images, labels and model # ... method = IntegratedGradients ( model , steps = 50 , baseline_value = 0.0 ) explanations = method . explain ( images , labels ) IntegratedGradients \u00b6 Used to compute the Integrated Gradients, by cumulating the gradients along a path from a baseline to the desired point. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32, steps: int = 50, baseline_value: float = 0.0) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. steps : int = 50 Number of points to interpolate between the baseline and the desired point. baseline_value : float = 0.0 Scalar used to create the the baseline point. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute Integrated Gradients for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Integrated gradients, same shape as the inputs. Axiomatic Attribution for Deep Networks \u21a9 \u21a9 Computing Linear Restrictions of Neural Networks \u21a9 Trapezoidal rule \u21a9","title":"Integrated Gradient"},{"location":"api/integrated_gradients.html#integrated-gradients","text":"Integrated Gradients is a visualization technique resulting of a theoretical search for an explanatory method that satisfies two axioms, Sensitivity and Implementation Invariance (Sundararajan et al 1 ). Quote We consider the straightline path (in R^n R^n ) from the baseline \\bar{x} \\bar{x} to the input x x , and compute the gradients at all points along the path. Integrated gradients are obtained by cumulating these gradients. -- Axiomatic Attribution for Deep Networks (2017) 1 Rather than calculating only the gradient relative to the image, the method consists of averaging the gradient values along the path from a baseline state to the current value. The baseline state is often set to zero, representing the complete absence of features. More precisely, with \\bar{x} \\bar{x} the baseline state, x x the image, c c the class of interest and S_c S_c the unormalized class score (layer before softmax). The Integrated Gradient is defined as IG(x) = (x - \\bar{x}) \\cdot \\int_0^1{ \\frac { \\partial{S_c(\\tilde{x})} } { \\partial{\\tilde{x}} } \\Big|_{ \\tilde{x} = \\bar{x} + \\alpha(x - \\bar{x}) } d\\alpha } IG(x) = (x - \\bar{x}) \\cdot \\int_0^1{ \\frac { \\partial{S_c(\\tilde{x})} } { \\partial{\\tilde{x}} } \\Big|_{ \\tilde{x} = \\bar{x} + \\alpha(x - \\bar{x}) } d\\alpha } In order to approximate from a finite number of steps, the implementation here use the Trapezoidal rule 3 and not a left-Riemann summation, which allows for more accurate results and improved performance. (see the paper below for a comparison of the methods 2 ).","title":"Integrated Gradients"},{"location":"api/integrated_gradients.html#example","text":"from xplique.attributions import IntegratedGradients # load images, labels and model # ... method = IntegratedGradients ( model , steps = 50 , baseline_value = 0.0 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/integrated_gradients.html#IntegratedGradients","text":"Used to compute the Integrated Gradients, by cumulating the gradients along a path from a baseline to the desired point.","title":"IntegratedGradients"},{"location":"api/kernel_shap.html","text":"Kernel Shap \u00b6 Kernel SHAP is a method that uses the LIME framework to compute Shapley Values. Setting the pertubation function and the similarity kernel appropriately in the LIME framework allows theoretically obtaining Shapley Values more efficiently than directly computing Shapley Values. Quote The exact computation of SHAP values is challenging. However, by combining insights from current additive feature attribution methods, we can approximate them. We describe two model-agnostic approximation methods, [...] and another that is novel (Kernel SHAP) -- A Unified Approach to Interpreting Model Predictions 1 Example \u00b6 from xplique.attributions import KernelShap # load images, labels and model # define a custom map_to_interpret_space function # ... method = KernelShap ( model , map_to_interpret_space = custom_map , nb_samples = 100 ) explanations = method . explain ( images , labels ) The choice of the map function will have a great deal toward the quality of explanation. KernelShap \u00b6 Kernel SHAP is a method that uses the LIME framework to compute Shapley Values. Setting the loss function, weighting kernel and regularization terms appropriately in the LIME framework allows theoretically obtaining Shapley Values more efficiently than directly computing Shapley Values. __init__(self, model: Callable, batch_size: int = 1, map_to_interpret_space: Union[Callable, NoneType] = None, nb_samples: int = 800, batch_pertubed_samples: Union[int, NoneType] = 64, ref_values: Union[numpy.ndarray, NoneType] = None) \u00b6 explain(self, inputs: Union[numpy.ndarray, tf.Tensor], labels: Union[numpy.ndarray, tf.Tensor]) -> numpy.ndarray \u00b6 This method attributes the output of the model with given labels to the inputs of the model using the approach described above, training an interpretable model and returning a representation of the interpretable model. Parameters inputs : Union[numpy.ndarray, tf.Tensor] Tensor or numpy array of shape (N, W, H, C) Input samples, with N number of samples, W & H the sample dimensions, and C the number of channels. labels : Union[numpy.ndarray, tf.Tensor] Tensor or numpy array of shape (N, L) One hot encoded labels to compute for each sample, with N the number of samples, and L the number of classes. Return explanations : numpy.ndarray Numpy array of shape: (N, W, H) Coefficients of the interpretable model. Those coefficients having the size of the interpretable space will be given the same value to coefficient which were grouped together (e.g belonging to the same super-pixel). A Unified Approach to Interpreting Model Predictions \u21a9","title":"Kernel Shap"},{"location":"api/kernel_shap.html#kernel-shap","text":"Kernel SHAP is a method that uses the LIME framework to compute Shapley Values. Setting the pertubation function and the similarity kernel appropriately in the LIME framework allows theoretically obtaining Shapley Values more efficiently than directly computing Shapley Values. Quote The exact computation of SHAP values is challenging. However, by combining insights from current additive feature attribution methods, we can approximate them. We describe two model-agnostic approximation methods, [...] and another that is novel (Kernel SHAP) -- A Unified Approach to Interpreting Model Predictions 1","title":"Kernel Shap"},{"location":"api/kernel_shap.html#example","text":"from xplique.attributions import KernelShap # load images, labels and model # define a custom map_to_interpret_space function # ... method = KernelShap ( model , map_to_interpret_space = custom_map , nb_samples = 100 ) explanations = method . explain ( images , labels ) The choice of the map function will have a great deal toward the quality of explanation.","title":"Example"},{"location":"api/kernel_shap.html#KernelShap","text":"Kernel SHAP is a method that uses the LIME framework to compute Shapley Values. Setting the loss function, weighting kernel and regularization terms appropriately in the LIME framework allows theoretically obtaining Shapley Values more efficiently than directly computing Shapley Values.","title":"KernelShap"},{"location":"api/lime.html","text":"LIME \u00b6 The Lime method use an interpretable model to provide an explanation. More specifically, you map inputs ( x \\in R^d x \\in R^d <span><span class=\"MathJax_Preview\">x \\in R^d</span><script type=\"math/tex\">x \\in R^d ) to an interpretable space (e.g super-pixels) of size num_interpetable_features. From there you generate pertubed interpretable samples ( z' \\in {0,1}^{num\\_interpretable\\_samples z' \\in {0,1}^{num\\_interpretable\\_samples <span><span class=\"MathJax_Preview\">z' \\in {0,1}^{num\\_interpretable\\_samples</span><script type=\"math/tex\">z' \\in {0,1}^{num\\_interpretable\\_samples where 1 1 means we keep this specific interpretable feature). Once you have your interpretable samples you can map them back to their original space (the pertubed samples z \\in R^d z \\in R^d <span><span class=\"MathJax_Preview\">z \\in R^d</span><script type=\"math/tex\">z \\in R^d ) and obtain the label prediction of your model for each pertubed samples. In the Lime method you define a similarity kernel which compute the similarity between an input and its pertubed representations (either in the original input space or in the interpretable space): \\pi_x(z',z) \\pi_x(z',z) <span><span class=\"MathJax_Preview\">\\pi_x(z',z)</span><script type=\"math/tex\">\\pi_x(z',z) . Finally, you train an interpretable model per input, using interpretable samples along the corresponding pertubed labels and it will draw interpretable samples weighted by the similarity kernel. Thus, you will have an interpretable explanation (i.e in the interpretable space) which can be broadcasted afterwards to the original space considering the mapping you used. Quote The overall goal of LIME is to identify an interpretable model over the interpretable representation that is locally faithful to the classifier. -- \"Why Should I Trust You?\": Explaining the Predictions of Any Classifier. 1 Example \u00b6 from xplique.attributions import Lime # load images, labels and model # define a custom map_to_interpret_space function # ... method = Lime ( model , map_to_interpret_space = custom_map , nb_samples = 100 ) explanations = method . explain ( images , labels ) The choice of the interpretable model and the map function will have a great deal toward the quality of explanation. Lime \u00b6 Used to compute the LIME method. __init__(self, model: Callable, batch_size: int = 1, interpretable_model: Any = Ridge(alpha=2), similarity_kernel: Union[Callable[[tf.Tensor, tf.Tensor, tf.Tensor], tf.Tensor], NoneType] = None, pertub_func: Union[Callable[[Union[int, tf.Tensor], int], tf.Tensor], NoneType] = None, map_to_interpret_space: Union[Callable[[tf.Tensor], tf.Tensor], NoneType] = None, ref_values: Union[numpy.ndarray, NoneType] = None, nb_samples: int = 150, batch_pertubed_samples: Union[int, NoneType] = None, distance_mode: str = 'euclidean', kernel_width: float = 45.0, prob: float = 0.5) \u00b6 explain(self, inputs: Union[numpy.ndarray, tf.Tensor], labels: Union[numpy.ndarray, tf.Tensor]) -> numpy.ndarray \u00b6 This method attributes the output of the model with given labels to the inputs of the model using the approach described above, training an interpretable model and returning a representation of the interpretable model. Parameters inputs : Union[numpy.ndarray, tf.Tensor] Tensor or numpy array of shape (N, W, H, C) Input samples, with N number of samples, W & H the sample dimensions, and C the number of channels. labels : Union[numpy.ndarray, tf.Tensor] Tensor or numpy array of shape (N, L) One hot encoded labels to compute for each sample, with N the number of samples, and L the number of classes. Return explanations : numpy.ndarray Numpy array of shape: (N, W, H) Coefficients of the interpretable model. Those coefficients having the size of the interpretable space will be given the same value to coefficient which were grouped together (e.g belonging to the same super-pixel). \"Why Should I Trust You?\": Explaining the Predictions of Any Classifier. \u21a9","title":"LIME"},{"location":"api/lime.html#lime","text":"The Lime method use an interpretable model to provide an explanation. More specifically, you map inputs ( x \\in R^d x \\in R^d <span><span class=\"MathJax_Preview\">x \\in R^d</span><script type=\"math/tex\">x \\in R^d ) to an interpretable space (e.g super-pixels) of size num_interpetable_features. From there you generate pertubed interpretable samples ( z' \\in {0,1}^{num\\_interpretable\\_samples z' \\in {0,1}^{num\\_interpretable\\_samples <span><span class=\"MathJax_Preview\">z' \\in {0,1}^{num\\_interpretable\\_samples</span><script type=\"math/tex\">z' \\in {0,1}^{num\\_interpretable\\_samples where 1 1 means we keep this specific interpretable feature). Once you have your interpretable samples you can map them back to their original space (the pertubed samples z \\in R^d z \\in R^d <span><span class=\"MathJax_Preview\">z \\in R^d</span><script type=\"math/tex\">z \\in R^d ) and obtain the label prediction of your model for each pertubed samples. In the Lime method you define a similarity kernel which compute the similarity between an input and its pertubed representations (either in the original input space or in the interpretable space): \\pi_x(z',z) \\pi_x(z',z) <span><span class=\"MathJax_Preview\">\\pi_x(z',z)</span><script type=\"math/tex\">\\pi_x(z',z) . Finally, you train an interpretable model per input, using interpretable samples along the corresponding pertubed labels and it will draw interpretable samples weighted by the similarity kernel. Thus, you will have an interpretable explanation (i.e in the interpretable space) which can be broadcasted afterwards to the original space considering the mapping you used. Quote The overall goal of LIME is to identify an interpretable model over the interpretable representation that is locally faithful to the classifier. -- \"Why Should I Trust You?\": Explaining the Predictions of Any Classifier. 1","title":"LIME"},{"location":"api/lime.html#example","text":"from xplique.attributions import Lime # load images, labels and model # define a custom map_to_interpret_space function # ... method = Lime ( model , map_to_interpret_space = custom_map , nb_samples = 100 ) explanations = method . explain ( images , labels ) The choice of the interpretable model and the map function will have a great deal toward the quality of explanation.","title":"Example"},{"location":"api/lime.html#Lime","text":"Used to compute the LIME method.","title":"Lime"},{"location":"api/occlusion.html","text":"Occlusion sensitivity \u00b6 The Occlusion sensitivity method sweep a patch that occludes pixels over the images, and use the variations of the model prediction to deduce critical areas. 1 Quote [...] this method, referred to as Occlusion, replacing one feature x_i x_i at the time with a baseline and measuring the effect of this perturbation on the target output. -- Towards better understanding of the gradient-based attribution methods for Deep Neural Networks (2017) 2 with S_c S_c the unormalized class score (layer before softmax) and \\bar{x} \\bar{x} a baseline, the Occlusion sensitivity map \\phi \\phi is defined as : \\phi_i = S_c(x) - S_c(x_{[x_i = \\bar{x}]}) \\phi_i = S_c(x) - S_c(x_{[x_i = \\bar{x}]}) Example \u00b6 from xplique.attributions import Occlusion # load images, labels and model # ... method = Occlusion ( model , patch_size = ( 10 , 10 ), patch_stride = ( 2 , 2 ), occlusion_value = 0.5 ) explanations = method . explain ( images , labels ) Occlusion \u00b6 Used to compute the Occlusion sensitivity method, sweep a patch that occludes pixels over the images and use the variations of the model prediction to deduce critical areas. __init__(self, model: Callable, batch_size: Union[int, NoneType] = 32, patch_size: Union[int, Tuple[int, int]] = (3, 3), patch_stride: Union[int, Tuple[int, int]] = (3, 3), occlusion_value: float = 0.5) \u00b6 Parameters model : Callable Model used for computing explanations. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. patch_size : Union[int, Tuple[int, int]] = (3, 3) Size of the patches to apply, if integer then assume an hypercube. patch_stride : Union[int, Tuple[int, int]] = (3, 3) Stride between two patches, if integer then assume an hypercube. occlusion_value : float = 0.5 Value used as occlusion. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute Occlusion sensitivity for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Occlusion sensitivity, same shape as the inputs, except for the channels. Visualizing and Understanding Convolutional Networks (2014). \u21a9 Towards better understanding of gradient-based attribution methods for Deep Neural Networks \u21a9","title":"Occlusion sensitivity"},{"location":"api/occlusion.html#occlusion-sensitivity","text":"The Occlusion sensitivity method sweep a patch that occludes pixels over the images, and use the variations of the model prediction to deduce critical areas. 1 Quote [...] this method, referred to as Occlusion, replacing one feature x_i x_i at the time with a baseline and measuring the effect of this perturbation on the target output. -- Towards better understanding of the gradient-based attribution methods for Deep Neural Networks (2017) 2 with S_c S_c the unormalized class score (layer before softmax) and \\bar{x} \\bar{x} a baseline, the Occlusion sensitivity map \\phi \\phi is defined as : \\phi_i = S_c(x) - S_c(x_{[x_i = \\bar{x}]}) \\phi_i = S_c(x) - S_c(x_{[x_i = \\bar{x}]})","title":"Occlusion sensitivity"},{"location":"api/occlusion.html#example","text":"from xplique.attributions import Occlusion # load images, labels and model # ... method = Occlusion ( model , patch_size = ( 10 , 10 ), patch_stride = ( 2 , 2 ), occlusion_value = 0.5 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/occlusion.html#Occlusion","text":"Used to compute the Occlusion sensitivity method, sweep a patch that occludes pixels over the images and use the variations of the model prediction to deduce critical areas.","title":"Occlusion"},{"location":"api/rise.html","text":"RISE \u00b6 The RISE method consist of probing the model with randomly masked versions of the input image and obtaining the corresponding outputs to deduce critical areas. Quote [...] we estimate the importance of pixels by dimming them in random combinations, reducing their intensities down to zero. We model this by multiplying an image with a [0,1] valued mask. -- RISE: Randomized Input Sampling for Explanation of Black-box Models (2018) 1 with S_c S_c the class score after softmax , x x an input, and m m a mask (not binary) the RISE importance map \\phi \\phi is defined as : \\phi_i = \\frac{1}{\\mathbb{E}[m] N} \\sum_{i=0}^N S_c(x \\odot m_i) m_i \\phi_i = \\frac{1}{\\mathbb{E}[m] N} \\sum_{i=0}^N S_c(x \\odot m_i) m_i Example \u00b6 from xplique.attributions import Rise # load images, labels and model # ... method = Rise ( model , nb_samples = 80 , granularity = 6 , preservation_probability = 0.5 ) explanations = method . explain ( images , labels ) Rise \u00b6 Used to compute the RISE method, by probing the model with randomly masked versions of the input image and obtaining the corresponding outputs to deduce critical areas. __init__(self, model: Callable, batch_size: Union[int, NoneType] = 32, nb_samples: int = 4000, granularity: int = 7, preservation_probability: float = 0.5) \u00b6 Parameters model : Callable Model used for computing explanations. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. nb_samples : int = 4000 Number of masks generated for Monte Carlo sampling. granularity : int = 7 Size of the grid used to generate the scaled-down masks. Masks are then rescale to input_size + scaled-down size and cropped to input_size. preservation_probability : float = 0.5 Probability of preservation for each pixel (or the percentage of non-masked pixels in each masks), also the expectation value of the mask. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute RISE for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor RISE maps, same shape as the inputs, except for the channels. RISE: Randomized Input Sampling for Explanation of Black-box Models (2018) \u21a9","title":"Rise"},{"location":"api/rise.html#rise","text":"The RISE method consist of probing the model with randomly masked versions of the input image and obtaining the corresponding outputs to deduce critical areas. Quote [...] we estimate the importance of pixels by dimming them in random combinations, reducing their intensities down to zero. We model this by multiplying an image with a [0,1] valued mask. -- RISE: Randomized Input Sampling for Explanation of Black-box Models (2018) 1 with S_c S_c the class score after softmax , x x an input, and m m a mask (not binary) the RISE importance map \\phi \\phi is defined as : \\phi_i = \\frac{1}{\\mathbb{E}[m] N} \\sum_{i=0}^N S_c(x \\odot m_i) m_i \\phi_i = \\frac{1}{\\mathbb{E}[m] N} \\sum_{i=0}^N S_c(x \\odot m_i) m_i","title":"RISE"},{"location":"api/rise.html#example","text":"from xplique.attributions import Rise # load images, labels and model # ... method = Rise ( model , nb_samples = 80 , granularity = 6 , preservation_probability = 0.5 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/rise.html#Rise","text":"Used to compute the RISE method, by probing the model with randomly masked versions of the input image and obtaining the corresponding outputs to deduce critical areas.","title":"Rise"},{"location":"api/saliency.html","text":"Saliency Maps \u00b6 Saliency is visualization techniques based on the gradient of a class score relative to the input. Quote An interpretation of computing the image-specific class saliency using the class score derivative is that the magnitude of the derivative indicates which pixels need to be changed the least to affect the class score the most. One can expect that such pixels correspond to the object location in the image. -- Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps (2013) 1 More precisely, the explanation \\phi_x \\phi_x for an input x x , for a given class c c is defined as \\phi_x = \\Big{\\|} \\frac{\\partial{S_c(x)}}{\\partial{x}} \\Big{\\|} \\phi_x = \\Big{\\|} \\frac{\\partial{S_c(x)}}{\\partial{x}} \\Big{\\|} with S_c S_c the unormalized class score (layer before softmax). Example \u00b6 from xplique.attributions import Saliency # load images, labels and model # ... method = Saliency ( model ) explanations = method . explain ( images , labels ) Saliency \u00b6 Used to compute the absolute gradient of the output relative to the input. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = None, batch_size: Union[int, NoneType] = 64) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = None Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 64 Number of samples to explain at once, if None compute all at once. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute saliency maps for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Saliency maps. Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps \u21a9","title":"Saliency"},{"location":"api/saliency.html#saliency-maps","text":"Saliency is visualization techniques based on the gradient of a class score relative to the input. Quote An interpretation of computing the image-specific class saliency using the class score derivative is that the magnitude of the derivative indicates which pixels need to be changed the least to affect the class score the most. One can expect that such pixels correspond to the object location in the image. -- Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps (2013) 1 More precisely, the explanation \\phi_x \\phi_x for an input x x , for a given class c c is defined as \\phi_x = \\Big{\\|} \\frac{\\partial{S_c(x)}}{\\partial{x}} \\Big{\\|} \\phi_x = \\Big{\\|} \\frac{\\partial{S_c(x)}}{\\partial{x}} \\Big{\\|} with S_c S_c the unormalized class score (layer before softmax).","title":"Saliency Maps"},{"location":"api/saliency.html#example","text":"from xplique.attributions import Saliency # load images, labels and model # ... method = Saliency ( model ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/saliency.html#Saliency","text":"Used to compute the absolute gradient of the output relative to the input.","title":"Saliency"},{"location":"api/smoothgrad.html","text":"SmoothGrad \u00b6 SmoothGrad is a gradient-based explanation method, which, as the name suggests, averages the gradient at several points corresponding to small perturbations around the point of interest. The smoothing effect induced by the average help reducing the visual noise, and hence improve the explanations. Quote [...] The gradient at any given point will be less meaningful than a local average of gradient values. This suggests a new way to create improved sensitivity maps: instead of basing a visualization directly on the gradient, we could base it on a smoothing of the gradients with a Gaussian kernel. -- SmoothGrad: removing noise by adding noise (2017) 1 More precisely, the explanation \\phi_x \\phi_x for an input x x , for a given class c c is defined as \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{]} \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{]} with S_c S_c the unormalized class score (layer before softmax). The \\sigma \\sigma in the formula is controlled using the noise parameter, and the expectation is estimated using multiple samples. Example \u00b6 from xplique.attributions import SmoothGrad # load images, labels and model # ... method = SmoothGrad ( model , nb_samples = 50 , noise = 0.5 ) explanations = method . explain ( images , labels ) SmoothGrad \u00b6 Used to compute the SmoothGrad, by averaging Saliency maps of noisy samples centered on the original sample. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32, nb_samples: int = 50, noise: float = 0.2) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. nb_samples : int = 50 Number of noisy samples generated for the smoothing procedure. noise : float = 0.2 Scalar, noise used as standard deviation of a normal law centered on zero. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute SmoothGrad for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Smoothed gradients, same shape as the inputs. SmoothGrad: removing noise by adding noise (2017) \u21a9","title":"SmoothGrad"},{"location":"api/smoothgrad.html#smoothgrad","text":"SmoothGrad is a gradient-based explanation method, which, as the name suggests, averages the gradient at several points corresponding to small perturbations around the point of interest. The smoothing effect induced by the average help reducing the visual noise, and hence improve the explanations. Quote [...] The gradient at any given point will be less meaningful than a local average of gradient values. This suggests a new way to create improved sensitivity maps: instead of basing a visualization directly on the gradient, we could base it on a smoothing of the gradients with a Gaussian kernel. -- SmoothGrad: removing noise by adding noise (2017) 1 More precisely, the explanation \\phi_x \\phi_x for an input x x , for a given class c c is defined as \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{]} \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{]} with S_c S_c the unormalized class score (layer before softmax). The \\sigma \\sigma in the formula is controlled using the noise parameter, and the expectation is estimated using multiple samples.","title":"SmoothGrad"},{"location":"api/smoothgrad.html#example","text":"from xplique.attributions import SmoothGrad # load images, labels and model # ... method = SmoothGrad ( model , nb_samples = 50 , noise = 0.5 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/smoothgrad.html#SmoothGrad","text":"Used to compute the SmoothGrad, by averaging Saliency maps of noisy samples centered on the original sample.","title":"SmoothGrad"},{"location":"api/square_grad.html","text":"Square Grad \u00b6 Similar to SmoothGrad, Square Grad average the square of the gradients. \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[}\\Big{(} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{)}^2\\Big{]} \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[}\\Big{(} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{)}^2\\Big{]} with S_c S_c the unormalized class score (layer before softmax). The \\sigma \\sigma in the formula is controlled using the noise parameter. Example \u00b6 from xplique.attributions import SquareGrad # load images, labels and model # ... method = SquareGrad ( model , nb_samples = 50 , noise = 0.5 ) explanations = method . explain ( images , labels ) SquareGrad \u00b6 SquareGrad (or SmoothGrad^2) is an unpublished variant of classic SmoothGrad which squares each gradients of the noisy inputs before averaging. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32, nb_samples: int = 50, noise: float = 0.2) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. nb_samples : int = 50 Number of noisy samples generated for the smoothing procedure. noise : float = 0.2 Scalar, noise used as standard deviation of a normal law centered on zero. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute SmoothGrad for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Smoothed gradients, same shape as the inputs.","title":"SquareGrad"},{"location":"api/square_grad.html#square-grad","text":"Similar to SmoothGrad, Square Grad average the square of the gradients. \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[}\\Big{(} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{)}^2\\Big{]} \\phi_x = \\underset{\\xi ~\\sim~ \\mathcal{N}(0, \\sigma^2)}{\\mathbb{E}} \\Big{[}\\Big{(} \\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} } \\Big{)}^2\\Big{]} with S_c S_c the unormalized class score (layer before softmax). The \\sigma \\sigma in the formula is controlled using the noise parameter.","title":"Square Grad"},{"location":"api/square_grad.html#example","text":"from xplique.attributions import SquareGrad # load images, labels and model # ... method = SquareGrad ( model , nb_samples = 50 , noise = 0.5 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/square_grad.html#SquareGrad","text":"SquareGrad (or SmoothGrad^2) is an unpublished variant of classic SmoothGrad which squares each gradients of the noisy inputs before averaging.","title":"SquareGrad"},{"location":"api/tcav.html","text":"TCAV \u00b6 TCAV or Testing with Concept Activation Vector consist consists in using a concept activation vector (CAV) to quantify the relationship between this concept and a class. This is done by using the directional derivative of the concept vector on several samples of a given class and measuring the percentage of positive (a positive directional derivative indicating that an infinitesimal addition of the concept increases the probability of the class). For a Concept Activation Vector v_l v_l of a layer f_l f_l of a model, and f_{c} f_{c} the logit of the class c c , we measure the directional derivative S_c(x) = v_l \\cdot \\frac{ \\partial{f_c(x)} } { \\partial{f_l}(x) } S_c(x) = v_l \\cdot \\frac{ \\partial{f_c(x)} } { \\partial{f_l}(x) } . The TCAV score is the percentage of elements of the class c c for which the S_c S_c is positive. TCAV_c = \\frac{|x \\in \\mathcal{X}^c : S_c(x) > 0 |}{ | \\mathcal{X}^c | } TCAV_c = \\frac{|x \\in \\mathcal{X}^c : S_c(x) > 0 |}{ | \\mathcal{X}^c | } Example \u00b6 from xplique.concepts import Tcav tcav_renderer = Tcav ( model , 'mixed4d' , cav ) tcav_score = tcav_renderer ( samples , class_index ) Tcav \u00b6 Used to Test a Concept Activation Vector, using the sign of the directional derivative of a concept vector relative to a class. __init__(self, model: tf.keras.Model, target_layer: Union[str, int], cav: tf.Tensor, batch_size: int = 64) \u00b6 Parameters model : tf.keras.Model Model to extract concept from. target_layer : Union[str, int] Index of the target layer or name of the layer. cav : tf.Tensor Concept Activation Vector, see CAV module. batch_size : int = 64 Batch size during the predictions. directional_derivative(multi_head_model: tf.keras.Model, inputs: tf.Tensor, label: int, cav: tf.Tensor) -> tf.Tensor \u00b6 Compute the gradient of the label relative to the activations of the CAV layer. Parameters multi_head_model : tf.keras.Model Model reconfigured, first output is the activations of the CAV layer, and the second output is the prediction layer. inputs : tf.Tensor Input sample on which to test the influence of the concept. label : int Index of the class to test. cav : tf.Tensor Concept Activation Vector, same shape as the activations output. Return directional_derivative : tf.Tensor Directional derivative values of each samples. score(self, inputs: tf.Tensor, label: int) -> float \u00b6 Compute and return the Concept Activation Vector (CAV) associated to the dataset and the layer targeted. Parameters inputs : tf.Tensor Input sample on which to test the influence of the concept. label : int Index of the class to test. Return tcav : float Percentage of sample that contains the concept with a positive impact on the class Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018). \u21a9","title":"Tcav"},{"location":"api/tcav.html#tcav","text":"TCAV or Testing with Concept Activation Vector consist consists in using a concept activation vector (CAV) to quantify the relationship between this concept and a class. This is done by using the directional derivative of the concept vector on several samples of a given class and measuring the percentage of positive (a positive directional derivative indicating that an infinitesimal addition of the concept increases the probability of the class). For a Concept Activation Vector v_l v_l of a layer f_l f_l of a model, and f_{c} f_{c} the logit of the class c c , we measure the directional derivative S_c(x) = v_l \\cdot \\frac{ \\partial{f_c(x)} } { \\partial{f_l}(x) } S_c(x) = v_l \\cdot \\frac{ \\partial{f_c(x)} } { \\partial{f_l}(x) } . The TCAV score is the percentage of elements of the class c c for which the S_c S_c is positive. TCAV_c = \\frac{|x \\in \\mathcal{X}^c : S_c(x) > 0 |}{ | \\mathcal{X}^c | } TCAV_c = \\frac{|x \\in \\mathcal{X}^c : S_c(x) > 0 |}{ | \\mathcal{X}^c | }","title":"TCAV"},{"location":"api/tcav.html#example","text":"from xplique.concepts import Tcav tcav_renderer = Tcav ( model , 'mixed4d' , cav ) tcav_score = tcav_renderer ( samples , class_index )","title":"Example"},{"location":"api/tcav.html#Tcav","text":"Used to Test a Concept Activation Vector, using the sign of the directional derivative of a concept vector relative to a class.","title":"Tcav"},{"location":"api/vargrad.html","text":"VarGrad \u00b6 Similar to SmoothGrad, VarGrad a variance analog of SmoothGrad, and can be defined as follows: \\phi_x = \\underset{\\xi ~\\sim\\ \\mathcal{N}(0, \\sigma^2)}{\\mathcal{V}} \\Big{[}\\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} }\\Big{]} \\phi_x = \\underset{\\xi ~\\sim\\ \\mathcal{N}(0, \\sigma^2)}{\\mathcal{V}} \\Big{[}\\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} }\\Big{]} with S_c S_c the unormalized class score (layer before softmax). The \\sigma \\sigma in the formula is controlled using the noise parameter. Example \u00b6 from xplique.attributions import VarGrad # load images, labels and model # ... method = VarGrad ( model , nb_samples = 50 , noise = 0.5 ) explanations = method . explain ( images , labels ) VarGrad \u00b6 VarGrad is a variance analog to SmoothGrad. __init__(self, model: tf.keras.Model, output_layer: Union[str, int, NoneType] = -1, batch_size: Union[int, NoneType] = 32, nb_samples: int = 50, noise: float = 0.2) \u00b6 Parameters model : tf.keras.Model Model used for computing explanations. output_layer : Union[str, int, NoneType] = -1 Layer to target for the output (e.g logits or after softmax), if int, will be be interpreted as layer index, if string will look for the layer name. Default to the last layer, it is recommended to use the layer before Softmax. batch_size : Union[int, NoneType] = 32 Number of samples to explain at once, if None compute all at once. nb_samples : int = 50 Number of noisy samples generated for the smoothing procedure. noise : float = 0.2 Scalar, noise used as standard deviation of a normal law centered on zero. explain(self, inputs: tf.Tensor, labels: tf.Tensor) -> tf.Tensor \u00b6 Compute SmoothGrad for a batch of samples. Parameters inputs : tf.Tensor Input samples to be explained. labels : tf.Tensor One-hot encoded labels, one for each sample. Return explanations : tf.Tensor Smoothed gradients, same shape as the inputs.","title":"VarGrad"},{"location":"api/vargrad.html#vargrad","text":"Similar to SmoothGrad, VarGrad a variance analog of SmoothGrad, and can be defined as follows: \\phi_x = \\underset{\\xi ~\\sim\\ \\mathcal{N}(0, \\sigma^2)}{\\mathcal{V}} \\Big{[}\\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} }\\Big{]} \\phi_x = \\underset{\\xi ~\\sim\\ \\mathcal{N}(0, \\sigma^2)}{\\mathcal{V}} \\Big{[}\\frac { \\partial{S_c(x + \\xi)} } { \\partial{x} }\\Big{]} with S_c S_c the unormalized class score (layer before softmax). The \\sigma \\sigma in the formula is controlled using the noise parameter.","title":"VarGrad"},{"location":"api/vargrad.html#example","text":"from xplique.attributions import VarGrad # load images, labels and model # ... method = VarGrad ( model , nb_samples = 50 , noise = 0.5 ) explanations = method . explain ( images , labels )","title":"Example"},{"location":"api/vargrad.html#VarGrad","text":"VarGrad is a variance analog to SmoothGrad.","title":"VarGrad"}]}